dbDisconnect()
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
dbDisconnect(ucscDb)
result
plot(cars)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
dbDisconnect(ucscDb)
result
head(result)
size(result)
dim(result)
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
dbDisconnect(ucscDb)
head(result)
dim(result)
ucscDb <- dbConnect(MySQL(), user="genome", db="hg19",       host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
dbDisconnect(ucscDb)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10);
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
hfls("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(b,"scale") <- "liter"
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
df
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf = h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
clear all()
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
library(swirl)
rm(list=ls())
swirl()
?install.packages
library(dplyr)
swirl()
library(devtools)
has_devel()
install_version("yaml", version="2.1.16")
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=False)
?read.csv
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = False)
mydf = read.csv(path2csv, stringsAsFactors = False)
info()
read.csv(path2csv, stringsAsFactors = False)
mydf = read.csv(path2csv)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, country_r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(x:size))
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran2 <- select(cran,ip_id,package,size)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library("swirl")
swirl
swirl()
install.packages("lubridate")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment,hours = 8,minutes=59)
this_moment
nyc <- now(tz="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours =17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
class(sampleTimes)
aa <- year(sampleTimes)
aa
bb <- aa == 2012
bb
sum(bb)
day(sampleTimes)
wday(sampleTimes)
wday(sampleTimes,label=TRUE)
cc <- sum(year(sampleTimes)==2012 & wday(sampleTimes)==2)
cc
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
?boxplot
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm, col=green)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green",breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg -> table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Numbr of Counties in Each Region")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west"),col="green")
hist(subset(pollution$pm25,region=="west"),col="green")
west <- subset(pollution,region=="west")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1,2),mar = c(5,4,2,1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude,west$pm25,main="West")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?DEvices
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWRIL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(disp,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality,Month==5)
?points
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality,!(Month==5))
notmay <- subset(airquality,~(Month==5))
notmay <- subset(airquality,Month>5)
notmay <- subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=7)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue","red"),c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind)
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solzr.R,main="Ozone and Solar Radiation")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
setwd("G:/MyGitData/ExData_Plotting1")
RawData <- read.table("./data/household_power_consumption.txt", sep = ";",header = FALSE)
head(RawData)
source('~/.active-rstudio-document')
head(RawData)
?strptime
class(Rawdata)
class(RawData)
?as.Date
as.Date(RawData$Date)
aa1 <- as.Date(RawData$Date)
head(aa1)
head(DarData)
head(RawData)
aa1 <- as.Date(RawData$Date,"%d/%m/%Y")
aa1
head(aa1)
head(RawData)
class(aa1)
year(aa1)
years(aa1)
View(RawData)
View(RawData)
bb1 <- strptime(RawData$Date,"%d/%m/%Y")
View(bb1)
aa1
?as.date
?as.Date
View(bb1)
View(bb1)
aa1[1]
aa1[2]
dim(aa1)
length(aa1)
class(aa1)
library(lubridate)
year(aa[1])
year(aa1[1])
source('G:/MyGitData/ExData_Plotting1/plot1.R')
head(ReqdData)
View(ReqdData)
View(ReqdData)
View(ReqdData)
View(ReqdData)
dim(ReqdData)
with(ReqdData,hist(Global_active_power))
with(ReqdData,hist(as.numeric(Global_active_power))
)
?Devices
>copytopng
>copytopng
?copytopng
names(ReqdData)
with(ReqdData,hist(as.numeric(Global_active_power)))
View(ReqdData)
max(ReqdData$Global_active_power)
summary(ReqdData$Global_active_power)
quantiles(ReqdData$Global_active_power)
quantile(ReqdData$Global_active_power)
quantile(as.numeric(ReqdData$Global_active_power))
max(as.numeric(ReqdData$Global_active_power))
with(ReqdData,hist(as.numeric(Global_active_power)),breaks = 12)
summarize(as.numeric(ReqdData$Global_active_power))
library(dplyr)
summarize(as.numeric(ReqdData$Global_active_power))
day(as.Date(ReqdData$Date,"%d/%m/%Y"))
cc <- day(as.Date(ReqdData$Date,"%d/%m/%Y"))
cc <- wday(as.Date(ReqdData$Date,"%d/%m/%Y"))
table(cc)
View(ReqdData)
dd <- as.numeric(ReqdData$Global_active_power)
plot(dd)
class(ReqdData$Global_active_power)
class(ReqdData$Global_active_power[[1]])
class(ReqdData$Global_active_power[[1]][1])
class(ReqdData$Global_active_power[[1,1]])
class(ReqdData$Global_active_power[[2]])
ReqdData$Global_active_power[[2]]
table(ReqdData$Global_active_power)
dd <- as.numeric(as.character(ReqdData$Global_active_power))
plot(dd)
par(mfrow=c(1,1))
with(ReqdData,hist(as.numeric(as.character(Global_active_power))),breaks = 12)
?par
length(par())
names(par())
?hist
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),ylab="Global Active Power (kilowatts)"),breaks = 12,col="red")
par(mfrow=c(1,1))
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),ylab="Global Active Power (kilowatts)"),breaks = 12,col="red")
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",breaks = 12,col="red"))
par(mfrow=c(1,1))
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",breaks = 12,col="red"))
title(main = "Global Active Power")
par(mfrow=c(1,1))
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",breaks = 12,col="red"))
title(main = "Global Active Power")
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",breaks = 12,col="red",main = "Global Active Power"))
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",col="red",main = "Global Active Power"))
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",col="red",main = "Global Active Power"))
ReqdData[ReqdData == "?"] <- NA
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",col="red",main = "Global Active Power"))
table(ReqdData$Global_active_power)
dd <- as.numeric(as.character(ReqdData$Global_active_power))
max(dd)
?png
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"), antialias)
par(mfrow=c(1,1))
ReqdData[ReqdData == "?"] <- NA
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",col="red",main = "Global Active Power"))
dev.off()
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type =
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"), antialias)
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"), antialias)
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"))
dev.cur()
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white", res = NA, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"))
par(mfrow=c(1,1))
ReqdData[ReqdData == "?"] <- NA
with(ReqdData,hist(as.numeric(as.character(Global_active_power)),xlab="Global Active Power (kilowatts)",col="red",main = "Global Active Power"))
dev.off()
